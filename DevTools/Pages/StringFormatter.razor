@page "/stringformatter"
@using Newtonsoft.Json
@using NSQLFormatter

<h3>String Formatters</h3>

<div class="container-fluid">
    <div class="row">
        <div class="col">
            <div class="form-group">
                <label for="inputTxt"></label>
                <textarea @bind="Input" class="form-control" id="inputTxt" rows="10"> </textarea>
            </div>

        </div>
    </div>
    <div class="row">
        <div class="col">
            <div style="margin-top: 20px">
                <button @onclick="FormatJson" class="btn btn-primary">Json</button>
                <button @onclick="FormatSQL" class="btn btn-primary">SQL</button>
                <button @onclick="Upper" class="btn btn-primary">Upper</button>
                <button @onclick="Lower" class="btn btn-primary">Lower</button>
                <button @onclick="Base64EncodeText" class="btn btn-primary">Base64 Encode</button>
                <button @onclick="Base64DecodeText" class="btn btn-primary">base64 Decode</button>
                <button @onclick="URLEncodeText" class="btn btn-primary">URL Encode</button>
                <button @onclick="URLDecodeText" class="btn btn-primary">URL Decode</button>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <div class="form-group">
                <label for="outputTxt"></label>
                <textarea @bind="Output" class="form-control" id="outputTxt" rows="10"> </textarea>
            </div>
        </div>
    </div>
</div>



@code {
    public string? Input { get; set; }
    public string? Output { get; set; }

    private void FormatJson()
    {
        if (string.IsNullOrWhiteSpace(Input))
        {
            return;
        }

        try
        {
            dynamic? parsedJson = JsonConvert.DeserializeObject(Input);
            Output = JsonConvert.SerializeObject(parsedJson, Formatting.Indented);
        }
        catch
        {
            Output = "Error";
        }
    }

    private void FormatSQL()
    {
        if (string.IsNullOrWhiteSpace(Input))
        {
            return;
        }

        try
        {
            Output = NSQLFormatter.Formatter.Format(Input);
        }
        catch
        {
            Output = "Error";
        }
    }

    private void Upper()
    {
        Output = Input?.ToUpper();
    }

    private void Lower()
    {
        Output = Input?.ToLower();
    }

    private void Base64EncodeText()
    {
        if (string.IsNullOrWhiteSpace(Input))
        {
            return;
        }
        Output = Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(Input));
    }

    private void Base64DecodeText()
    {
        if (string.IsNullOrWhiteSpace(Input))
        {
            return;
        }

        try
        {
            Output = System.Text.Encoding.UTF8.GetString(Convert.FromBase64String(Input));
        }
        catch (Exception ex)
        {
            Output = ex.ToString();
        }
    }

    private void URLEncodeText()
    {
        if (string.IsNullOrWhiteSpace(Input))
        {
            return;
        }

        Output = System.Net.WebUtility.UrlEncode(Input);
    }

    private void URLDecodeText()
    {
        if (string.IsNullOrWhiteSpace(Input))
        {
            return;
        }

        Output = System.Net.WebUtility.UrlDecode(Input);
    }
}