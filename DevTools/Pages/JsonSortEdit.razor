@page "/jsoneditsort"
@using Newtonsoft.Json.Linq;
@using Newtonsoft.Json;
@using System.Text;

<h3>Json Edit/Sort</h3>

<div class="container-fluid">
    <div class="row">
        <div class="col">
            <div class="form-group">
                <label for="inputTxt"></label>
                <textarea @bind="Input1" class="form-control" id="inputTxt" rows="10"> </textarea>
            </div>
        </div>
    </div>
    <div class="row" style="margin-top: 20px">
        <div class="col-3">
            <label for="longInput">Sort By</label>
            <input type="text" @bind="SortProp" class="form-control" name="SortProp" id="SortProp" />
        </div>
        <div class="col-7">
            <label for="longInput">Exclude Fields (Comma seperated)</label>
            <input type="text" @bind="ExcludeProps" class="form-control" name="ExcludeProps" id="ExcludeProps" />
        </div>
        <div class="col-2" >
            <button @onclick="RemoveAndSort" class="btn btn-primary" style="margin-top: 20px">Run</button>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <div class="form-group">
                <label for="outputTxt"></label>
                <textarea @bind="Output" class="form-control" id="outputTxt" rows="10"> </textarea>
            </div>
        </div>
    </div>
</div>



@code {
    public string? Input1 { get; set; }
    public string? SortProp { get; set; }
    public string? ExcludeProps { get; set; }
    public string? Output { get; set; }

    private void RemoveAndSort()
    {
        if (string.IsNullOrWhiteSpace(Input1))
        {
            return;
        }

        var parsedInput = JToken.Parse(Input1);

        Output = RemoveAndSortInternal(parsedInput)?.ToString(Formatting.Indented);
    }

    private JArray RemoveAndSortInternal(JToken parsedInput)
    {
        var sortedInput = Sort(parsedInput);

        var excludePropArray = ExcludeProps?.Split(',', StringSplitOptions.RemoveEmptyEntries) ?? new string[0];

        if (excludePropArray.Any())
        {
            JArray updated = new();
            foreach (var item in sortedInput)
            {
                updated.Add(RemoveFields(item, excludePropArray));
            }

            return updated;
        }
        else
        {
            return sortedInput;
        }
    }

    private JArray Sort(JToken token)
    {
        if (token is JArray && SortProp != null)
        {
            var array = (JArray)token;
            return new JArray(array.OrderBy(obj => obj[SortProp]?.ToString())); ;
        }
        else if (token is JArray)
        {
            return (JArray)token;
        }
        else
        {
            return new JArray() { token };
        }
    }

    private JToken RemoveFields(JToken token, string[] fields)
    {
        JContainer? container = token as JContainer;
        if (container == null) return token;

        List<JToken> removeList = new List<JToken>();
        foreach (JToken el in container.Children())
        {
            JProperty? p = el as JProperty;
            if (p != null && fields.Contains(p.Name))
            {
                removeList.Add(el);
            }
            RemoveFields(el, fields);
        }

        foreach (JToken el in removeList)
        {
            el.Remove();
        }

        return token;
    }
}